// https://leetcode-cn.com/problems/count-numbers-with-unique-digits/
// Runtime: 0 ms
// Memory Usage: 2.1 MB
pub fn count_numbers_with_unique_digits(n: i32) -> i32 {
    if n < 11 {
        f(n)
    } else {
        f(10)
    }
}

fn f(n: i32) -> i32 {
    match n {
        1 => 10,
        2 => 9 * 9 + 10,
        3 => 9 * 9 * 8 + 9 * 9 + 10,
        4 => 9 * 9 * 8 * 7 + 9 * 9 * 8 + 9 * 9 + 10,
        5 => 9 * 9 * 8 * 7 * 6 + 9 * 9 * 8 * 7 + 9 * 9 * 8 + 9 * 9 + 10,
        6 => 9 * 9 * 8 * 7 * 6 * 5 + 9 * 9 * 8 * 7 * 6 + 9 * 9 * 8 * 7 + 9 * 9 * 8 + 9 * 9 + 10,
        7 => {
            9 * 9 * 8 * 7 * 6 * 5 * 4
                + 9 * 9 * 8 * 7 * 6 * 5
                + 9 * 9 * 8 * 7 * 6
                + 9 * 9 * 8 * 7
                + 9 * 9 * 8
                + 9 * 9
                + 10
        }
        8 => {
            9 * 9 * 8 * 7 * 6 * 5 * 4 * 3
                + 9 * 9 * 8 * 7 * 6 * 5 * 4
                + 9 * 9 * 8 * 7 * 6 * 5
                + 9 * 9 * 8 * 7 * 6
                + 9 * 9 * 8 * 7
                + 9 * 9 * 8
                + 9 * 9
                + 10
        }
        9 => {
            9 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2
                + 9 * 9 * 8 * 7 * 6 * 5 * 4 * 3
                + 9 * 9 * 8 * 7 * 6 * 5 * 4
                + 9 * 9 * 8 * 7 * 6 * 5
                + 9 * 9 * 8 * 7 * 6
                + 9 * 9 * 8 * 7
                + 9 * 9 * 8
                + 9 * 9
                + 10
        }
        10 => {
            9 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2
                + 9 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2
                + 9 * 9 * 8 * 7 * 6 * 5 * 4 * 3
                + 9 * 9 * 8 * 7 * 6 * 5 * 4
                + 9 * 9 * 8 * 7 * 6 * 5
                + 9 * 9 * 8 * 7 * 6
                + 9 * 9 * 8 * 7
                + 9 * 9 * 8
                + 9 * 9
                + 10
        }
        0 => 1,
        _ => 0,
    }
}
// math dynamic_programming backtracking
#[test]
fn test1_357() {
    assert_eq!(count_numbers_with_unique_digits(2), 91);
}
